// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model App {
  appId       String @id @default(uuid())
  mount_total Float
  app_name    String @default("Fotocopia")
}

model User {
  userId       String    @id @default(uuid())
  name         String
  lastname     String
  username     String    @unique
  email        String    @unique
  password     String
  last_session Boolean   @default(false)

  rol               String      @default("ADMIN")
  createBy          String?

  create_at DateTime  @default(now())
  update_at DateTime  @default(now()) @updatedAt
  delete_at Boolean   @default(false)

  machineList     Machine[]
  productList     Product[]
  rawmmaterList   Rawmater[]
  // controlList     Control[]
  stockList       Stock[]

  transactionCateogryList TransactionCategory[]
  transactionTypeList     TransactionType[]
}

model Machine {
  machineId       String    @id     @default(uuid())
  name            String
  description     String?

  createId        String
  createReference User    @relation(fields: [createId], references: [userId], onDelete: Cascade)

  // controlList     Control[]

  create_at       DateTime      @default(now())
  update_at       DateTime      @default(now()) @updatedAt
  delete_at       Boolean       @default(false)
}

model Product {
  productId       String    @id     @default(uuid())
  name            String
  description     String?

  createId        String
  createReference User    @relation(fields: [createId], references: [userId], onDelete: Cascade)

  // controlList     Control[]

  create_at       DateTime      @default(now())
  update_at       DateTime      @default(now()) @updatedAt
  delete_at       Boolean   @default(false)
}

model Rawmater {
  rawmatterId       String    @id     @default(uuid())
  name            String
  description     String?

  createId        String
  createReference User    @relation(fields: [createId], references: [userId], onDelete: Cascade)

  kg              Int
  code            String
  gr              Int

  // controlList     Control[]

  create_at       DateTime      @default(now())
  update_at       DateTime      @default(now()) @updatedAt
  delete_at       Boolean   @default(false)
}

model Control {
  controlId           String    @id     @default(uuid())

  date                String
  kg                  Int
  gr                  Int

  productId           String
  rawmatterId         String
  machineId           String
  createId            String      


  create_at       DateTime      @default(now())
  update_at       DateTime      @default(now()) @updatedAt
  delete_at       Boolean   @default(false)
  // createReference     User        @relation(fields: [controlId],    references: [userId], onUpdate: Cascade, onDelete: Cascade)
  // productReference    Product     @relation(fields: [productId],    references: [productId])
  // machineReference    Machine     @relation(fields: [machineId],    references: [machineId])
  // rawmatterReference  Rawmater    @relation(fields: [rawmatterId],  references: [rawmatterId])
}

model Stock {
  stockId         String    @id     @default(uuid())
  description     String
  price           Decimal
  quantity        Int

  createId        String
  createReference User    @relation(fields: [createId], references: [userId], onDelete: Cascade)

  create_at       DateTime      @default(now())
  update_at       DateTime      @default(now()) @updatedAt
  delete_at       Boolean   @default(false)
}

model Transaction {
  transactionId         String    @id     @default(uuid())
  mount                 Int
  description           String
  date                  String

  categoryId            String
  typeId                String

  createId              String

  create_at             DateTime      @default(now())
  update_at             DateTime      @default(now()) @updatedAt 
  delete_at             Boolean   @default(false)
}

model TransactionCategory {
  transactionCategoryId         String    @id     @default(uuid())
  name                  String
  description                  String

  createId              String
  createReference       User          @relation(fields: [createId], references: [userId], onDelete: Cascade)

  create_at             DateTime      @default(now())
  update_at             DateTime      @default(now()) @updatedAt
  delete_at             Boolean   @default(false)
}

model TransactionType {
  transactionTypeId         String    @id     @default(uuid())
  name                  String
  description           String
  
  createId              String
  createReference       User          @relation(fields: [createId], references: [userId], onDelete: Cascade)    

  create_at             DateTime      @default(now())
  update_at             DateTime      @default(now()) @updatedAt
  delete_at             Boolean   @default(false)
}
