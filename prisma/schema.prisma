// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model App {
  appId       String @id @default(uuid())
  mount_total Float
  app_name    String @default("Fotocopia")
}

model User {
  userId       String    @id @default(uuid())
  name         String
  lastname     String
  username     String    @unique
  email        String    @unique
  password     String
  last_session Boolean   @default(false)

  rol               String      @default("ADMIN")
  createBy          String?

  create_at DateTime  @default(now())
  update_at DateTime  @default(now()) @updatedAt
  delete_at Boolean   @default(false)

  machineList       Machine[]
  productList       Product[]
  rawmmaterList     Rawmater[]
  controls          Control[]
  stockList         Stock[]
  history           History[]

  transactionCateogryList TransactionCategory[]
  transactionTypeList     TransactionType[]
}

model Machine {
  machineId       String    @id     @default(uuid())
  name            String
  description     String?

  createId        String
  createReference User    @relation(fields: [createId], references: [userId], onDelete: Cascade)

  controls       Control[]

  create_at       DateTime      @default(now())
  update_at       DateTime      @default(now()) @updatedAt
  delete_at       Boolean       @default(false)
}

model Product {
  productId       String    @id     @default(uuid())
  name            String
  description     String?

  createId        String
  createReference User    @relation(fields: [createId], references: [userId], onDelete: Cascade)

  controls       Control[]

  create_at       DateTime      @default(now())
  update_at       DateTime      @default(now()) @updatedAt
  delete_at       Boolean   @default(false)
}

model Rawmater {
  rawmatterId       String    @id     @default(uuid())
  name            String
  description     String?

  createId        String
  createReference User    @relation(fields: [createId], references: [userId], onDelete: Cascade)

  kg              Int
  code            String
  gr              Int

  controls       Control[]

  create_at       DateTime      @default(now())
  update_at       DateTime      @default(now()) @updatedAt
  delete_at       Boolean   @default(false)
}

model Control {
  controlId           String    @id     @default(uuid())

  date                String
  kg                  Int
  gr                  Int

  create_at       DateTime      @default(now())
  update_at       DateTime      @default(now()) @updatedAt
  delete_at       Boolean       @default(false)

  createId            String
  createReference     User        @relation(fields: [createId],    references: [userId])
  
  productId           String
  productReference    Product     @relation(fields: [productId],    references: [productId])

  machineId           String
  machineReference    Machine     @relation(fields: [machineId],    references: [machineId])

  rawmatterId         String
  rawmatterReference  Rawmater    @relation(fields: [rawmatterId],  references: [rawmatterId])
}

model Stock {
  stockId         String    @id     @default(uuid())
  description     String
  price           Decimal
  quantity        Int

  createId        String
  createReference User    @relation(fields: [createId], references: [userId], onDelete: Cascade)

  create_at       DateTime      @default(now())
  update_at       DateTime      @default(now()) @updatedAt
  delete_at       Boolean   @default(false)
}

model Transaction {
  transactionId         String    @id     @default(uuid())
  mount                 Int
  description           String
  date                  String

  categoryId            String
  categoryReference     TransactionCategory     @relation(fields: [categoryId], references: [transactionCategoryId])
  typeId                String
  typeReference         TransactionType     @relation(fields: [typeId], references: [transactionTypeId])

  createId              String

  create_at             DateTime      @default(now())
  update_at             DateTime      @default(now()) @updatedAt 
  delete_at             Boolean   @default(false)
}

model TransactionCategory {
  transactionCategoryId         String    @id     @default(uuid())
  name                  String
  description                  String

  createId              String
  createReference       User          @relation(fields: [createId], references: [userId], onDelete: Cascade)

  create_at             DateTime      @default(now())
  update_at             DateTime      @default(now()) @updatedAt
  delete_at             Boolean   @default(false)

  transactions          Transaction[]
}

model TransactionType {
  transactionTypeId         String    @id     @default(uuid())
  name                  String
  description           String
  
  createId              String
  createReference       User          @relation(fields: [createId], references: [userId], onDelete: Cascade)    

  create_at             DateTime      @default(now())
  update_at             DateTime      @default(now()) @updatedAt
  delete_at             Boolean       @default(false)

  transactions          Transaction[]
}

model StaticticsObjectsYear {
  staticticsForYearId         String      @id     @default(uuid())
  year                        Int

  objectType                  String              @default("Transaction")
  objectName                  String

  total_month_1               Int                 @default(0)
  total_month_2               Int                 @default(0)
  total_month_3               Int                 @default(0)
  total_month_4               Int                 @default(0)
  total_month_5               Int                 @default(0)
  total_month_6               Int                 @default(0)
  total_month_7               Int                 @default(0)
  total_month_8               Int                 @default(0)
  total_month_9               Int                 @default(0)
  total_month_10              Int                 @default(0)
  total_month_11              Int                 @default(0)
  total_month_12              Int                 @default(0)
}

model History {
  id                  String        @id         @default(uuid())

  objectName          String?
  objectId            String?
  objectReference     Boolean?           @default(false)

  userId              String        
  userReference       User              @relation(fields: [userId], references: [userId])

  description String

  createAt                  DateTime @default(now())
}
